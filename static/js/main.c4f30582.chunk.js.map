{"version":3,"sources":["images/up.svg","images/down.svg","images/left.svg","images/right.svg","images/robot.svg","util.js","components/Robot.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getPosition","x","y","top","right","caluclateXValue","index","value","Math","abs","Robot","_ref","positions","react_default","a","createElement","data-testid","className","style","src","robot","alt","process","_React$useState","React","useState","_React$useState2","Object","slicedToArray","changeX","_React$useState3","_React$useState4","changeY","move","command","_getCordinates","getCordinates","xPos","yPos","boxes","_loop","i","push","onClick","newX","newY","setTimeout","teleport","ceil","key","renderBoxes","Robot_Robot","up","left","down","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4f30582.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/up.25a9000e.svg\";","module.exports = __webpack_public_path__ + \"static/media/down.3e9c517e.svg\";","module.exports = __webpack_public_path__ + \"static/media/left.713fe29d.svg\";","module.exports = __webpack_public_path__ + \"static/media/right.3aa5dcbc.svg\";","module.exports = __webpack_public_path__ + \"static/media/robot.0d939441.svg\";","const itemsPerRow = 5;\nconst miniumRow = 1;\n\nexport const getPosition = (x, y) => {\n  return {\n    top: 500 - (y * 100),\n    right: 500 - (x * 100)\n  };\n};\n\nexport const caluclateXValue = index => {\n  const value = index % itemsPerRow;\n  if (value === 0) {\n    return 1;\n  }\n  return Math.abs(value - itemsPerRow -1); // reduce 1 because of min box indexe is 1;\n};\n\nexport const getTeleportationCordinates = index => {\n  return {\n    x: caluclateXValue(index), \n    y: Math.ceil(index/itemsPerRow)\n  }\n};\n\nexport const getCordinates = (x, y, command) => {\n  if (command === 'up' && y < itemsPerRow) {\n    return { x, y: y + 1}\n  } else if (command === 'down' && y > miniumRow) {\n    return { x, y: y - 1}\n  } else if (command === 'left' && x > miniumRow) {\n    return { x: x - 1, y}\n  } else if (command === 'right' && x < itemsPerRow) {\n    return { x: x + 1, y}\n  } else {\n    return { x, y }\n  }\n};","import React from 'react';\n\nimport robot from '../images/robot.svg';\n\nexport const Robot = ({ positions }) => {\n  return (\n    <div data-testid=\"robot-body\" className=\"robotContainer\" style={positions}>\n      <img src={robot} className=\"robot\" alt=\"robot\" />\n    </div>\n  )\n};\n","import React from 'react';\nimport './App.css';\n\nimport up from './images/up.svg';\nimport down from './images/down.svg';\nimport left from './images/left.svg';\nimport right from './images/right.svg';\n\nimport { hot } from 'react-hot-loader';\n\nimport { getPosition, getTeleportationCordinates, getCordinates } from './util';\n\nimport { Robot } from './components/Robot'; \n\nconst boxCount = 25;\n\nconst App = () => {\n  const [x, changeX] = React.useState(1);\n  const [y, changeY] = React.useState(1);\n\n  const move = command => {\n    const { x: xPos, y: yPos } = getCordinates(x, y, command);\n    changeX(xPos);\n    changeY(yPos);\n  };\n\n  const teleport = ({x: newX, y: newY}) => {\n    setTimeout(() => {\n      changeX(newX);\n      changeY(newY);\n    }, (Math.abs(x-newX) + Math.abs(y-newY)) * 100); \n    // dealy teleport duration based on travel distance (how many boxes)\n  };\n\n  const renderBoxes = () => {\n    let boxes = [];\n\n    for (let i = boxCount; i >= 1; i--) {\n      boxes.push(\n        <div\n          onClick={() => teleport(getTeleportationCordinates(i))}\n          key={i}\n          className=\"box\"\n        />\n      );\n    }\n    return boxes;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"playground\">\n        {renderBoxes()}\n        <Robot positions={getPosition(x,y)} />\n      </div>\n      <div className=\"controller\">\n        <div className=\"arrow-container\" />\n        <div data-testid=\"up-button\" className=\"arrow-container\" onClick={() => move('up')}>\n          <img src={up} className=\"up arrow\" alt=\"up\" />\n        </div>\n        <div className=\"arrow-container\" />\n        <div data-testid=\"left-button\" className=\"arrow-container\" onClick={() => move('left')}>\n          <img src={left} className=\"left arrow\" alt=\"left\" />\n        </div>\n        <div className=\"arrow-container\" />\n        <div data-testid=\"right-button\" className=\"arrow-container\" onClick={() => move('right')}>\n          <img src={right} className=\"right arrow\" alt=\"right\" />\n        </div>\n        <div className=\"arrow-container\" />\n        <div data-testid=\"down-button\" className=\"arrow-container\" onClick={() => move('down')}>\n          <img src={down} className=\"down arrow\" alt=\"down\" />\n        </div>\n        <div className=\"arrow-container\" />\n      </div>\n    </div>\n  );\n};\n\nexport default (process.env.NODE_ENV === 'development'\n  ? hot(module)(App)\n  : App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}